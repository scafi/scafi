name: CI

on:
  push:
    branches: [master, develop]
    tags: v*
  pull_request:
    branches: [master, develop]
  workflow_dispatch:

jobs:
  Build-and-Test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, mac, windows] # todo, add mac and windows ?
        jvm_version: [adopt@1.8, adopt@1.11, openjdk@1.17] # Update using LTSs and latest
    runs-on: ${{ matrix.os }}-latest
    concurrency:
      group: ${{ github.workflow }}-build-${{ matrix.os }}-${{ matrix.jvm_version }}-${{ github.event.number || github.ref }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Scala and JDK
        with:
          java-version: ${{ matrix.jvm_version }}
        uses: olafurpg/setup-scala@v13
      - name: Sbt run tests
        shell: bash # for windows
        run: sbt +test
      - name: Sbt check publish artifacts
        shell: bash
        run: sbt +publishLocal

  Coverage:
    runs-on: ubuntu-latest
    needs: [Build-and-Test]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Scala and JDK
        with:
          java-version: ${{ matrix.jvm_version }}
        uses: olafurpg/setup-scala@v13
      - name: Sbt run tests
        shell: bash # for windows
        run: sbt coverage test
      - name: Coverage report
        shell: bash
        run: sbt coverageReport
      - name: Upload coverage to Codecov
        uses: "codecov/codecov-action@v2"
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  Release:
    runs-on: ubuntu-latest
    needs: [Build-and-Test]
    if: github.event_name != 'pull_request' # it avoids to run release on PR for now 
    #if: startsWith(github.ref, 'refs/tags/v') # run only for tagged commits
    concurrency:
      group: release
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - uses: olafurpg/setup-scala@v13
        with:
          java-version: liberica@1.11.0
      - run: sbt ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASS }}
          PGP_PASSWORD: ${{ secrets.PGP_PASS }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}


  Publish-doc-stable:
    runs-on: ubuntu-latest
    needs: [Release]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Setup Scala and JDK
        with:
          java-version: ${{ matrix.jvm_version }}
        uses: olafurpg/setup-scala@v13
      - name: Sbt generate scaladoc
        shell: bash # for windows
        run: sbt unidoc
      - name: Deploy to scafi-docs.surge.sh
        uses: dswistowski/surge-sh-action@v1
        with:
          domain: 'scafi-docs.surge.sh'
          project: 'target/scala-2.12/unidoc/'
          login: ${{ secrets.SURGE_LOGIN }}
          token: ${{ secrets.SURGE_TOKEN }}

  Publish-doc-unstable:
    runs-on: ubuntu-latest
    needs: [Release]
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v2
      - name: Setup Scala and JDK
        with:
          java-version: ${{ matrix.jvm_version }}
        uses: olafurpg/setup-scala@v13
      - name: Sbt generate scaladoc
        shell: bash # for windows
        run: sbt unidoc
      - name: Deploy to scafi-docs-unstable.surge.sh
        uses: dswistowski/surge-sh-action@v1
        with:
          domain: 'scafi-docs-unstable.surge.sh'
          project: 'target/scala-2.12/unidoc/'
          login: ${{ secrets.SURGE_LOGIN }}
          token: ${{ secrets.SURGE_TOKEN }}
